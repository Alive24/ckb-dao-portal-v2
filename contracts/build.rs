use std::process::Command;
use std::fs;
use std::path::Path;
use std::env;

fn main() {
    // Get the project root directory
    let project_root = env::var("CARGO_MANIFEST_DIR").unwrap();
    let project_root = Path::new(&project_root).parent().unwrap();
    
    // Path to the schema file
    let schema_path = project_root.join("schemas/dao.mol");
    
    // Output directory for generated code
    let output_dir = Path::new(&env::var("CARGO_MANIFEST_DIR").unwrap())
        .join("libs/dao-shared/src/generated");
    
    // Create output directory if it doesn't exist
    fs::create_dir_all(&output_dir).expect("Failed to create generated directory");
    
    // Output file path
    let output_file = output_dir.join("dao.rs");
    
    println!("cargo:rerun-if-changed={}", schema_path.display());
    
    // Run moleculec to generate Rust code
    let output = Command::new("moleculec")
        .args(&[
            "--language", "rust",
            "--schema-file", schema_path.to_str().unwrap(),
        ])
        .output()
        .expect("Failed to execute moleculec. Make sure moleculec is installed and in PATH");
    
    if !output.status.success() {
        panic!(
            "moleculec failed: {}",
            String::from_utf8_lossy(&output.stderr)
        );
    }
    
    // Write the generated code to file
    fs::write(&output_file, &output.stdout)
        .expect("Unable to write generated code to file");
    
    println!("cargo:warning=Generated Molecule bindings at {}", output_file.display());
    
    // Also generate a mod.rs file that exports the generated types
    let mod_file = output_dir.join("mod.rs");
    let mod_content = r#"//! Auto-generated Molecule bindings for DAO types
//! DO NOT EDIT THIS FILE DIRECTLY

#![allow(warnings)]

pub mod dao;
pub use dao::*;
"#;
    
    fs::write(&mod_file, mod_content)
        .expect("Unable to write mod.rs file");
}